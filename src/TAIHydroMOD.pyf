!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module TAIHydroMOD ! in 
    interface  ! in :TAIHydroMOD
        module TAIHydroMOD ! in :TAIHydroMOD:tai_hydro_mod.f90
            use data_buffer_mod
            use hydro_utilities_mod
            subroutine InitHydroMod(xin,zhin,nvar,npft,nx) ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
                real(kind=8) dimension(nx),intent(in) :: xin
                real(kind=8) dimension(nx),intent(in),depend(nx) :: zhin
                integer intent(in) :: nvar
                integer intent(in) :: npft
                integer, optional,intent(hide),depend(xin) :: nx=len(xin)
            end subroutine InitHydroMod
            subroutine FinalizeHydroMod ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
            end subroutine FinalizeHydroMod
            subroutine GetModelSims(n,h,U,Hwav,tau,Css,Cj) ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
                integer intent(in) :: n
                real(kind=8) dimension(n),intent(out),depend(n) :: h
                real(kind=8) dimension(n),intent(out),depend(n) :: U
                real(kind=8) dimension(n),intent(out),depend(n) :: Hwav
                real(kind=8) dimension(n),intent(out),depend(n) :: tau
                real(kind=8) dimension(n),intent(out),depend(n) :: Css
                real(kind=8) dimension(n),intent(out),depend(n) :: Cj
            end subroutine GetModelSims
            subroutine SetModelParams(d50,Cz0,Kdf,cbc,fr,alphaA,betaA,alphaD,betaD,cD0,ScD,n) ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
                real(kind=8) intent(in) :: d50
                real(kind=8) intent(in) :: Cz0
                real(kind=8) intent(in) :: Kdf
                real(kind=8) intent(in) :: cbc
                real(kind=8) intent(in) :: fr
                real(kind=8) dimension(n),intent(in) :: alphaA
                real(kind=8) dimension(n),intent(in),depend(n) :: betaA
                real(kind=8) dimension(n),intent(in),depend(n) :: alphaD
                real(kind=8) dimension(n),intent(in),depend(n) :: betaD
                real(kind=8) dimension(n),intent(in),depend(n) :: cD0
                real(kind=8) dimension(n),intent(in),depend(n) :: ScD
                integer, optional,intent(hide),depend(alphaA) :: n=len(alphaA)
            end subroutine SetModelParams
            subroutine ModelSetup(zh,pft,Bag,Esed,Dsed,Twav,U10,h0,U0,Hwav0,Css0,Cj0,n) ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
                real(kind=8) dimension(n),intent(in) :: zh
                integer dimension(n),intent(in),depend(n) :: pft
                real(kind=8) dimension(n),intent(in),depend(n) :: Bag
                real(kind=8) dimension(n),intent(in),depend(n) :: Esed
                real(kind=8) dimension(n),intent(in),depend(n) :: Dsed
                real(kind=8) intent(in) :: Twav
                real(kind=8) intent(in) :: U10
                real(kind=8) intent(in) :: h0
                real(kind=8) intent(in) :: U0
                real(kind=8) intent(in) :: Hwav0
                real(kind=8) intent(in) :: Css0
                real(kind=8) intent(in) :: Cj0
                integer, optional,intent(hide),depend(zh) :: n=len(zh)
            end subroutine ModelSetup
            subroutine ModelCallback ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
            end subroutine ModelCallback
            subroutine ModelRun(mode,tol,curstep,ncurstep,nextstep,error,n) ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
                integer intent(in) :: mode
                real(kind=8) dimension(n),intent(in) :: tol
                real(kind=8) intent(in) :: curstep
                real(kind=8) intent(out) :: ncurstep
                real(kind=8) intent(out) :: nextstep
                integer intent(out) :: error
                integer, optional,intent(hide),depend(tol) :: n=len(tol)
            end subroutine ModelRun
            subroutine CalcEdgeConvectionFlux(uhydro,fluxes,n,m) ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
                real(kind=8) dimension(n,m),intent(in) :: uhydro
                real(kind=8) dimension(n,m),intent(out),depend(n,m) :: fluxes
                integer, optional,intent(hide),depend(uhydro) :: n=shape(uhydro,0)
                integer, optional,intent(hide),depend(uhydro) :: m=shape(uhydro,1)
            end subroutine CalcEdgeConvectionFlux
            subroutine CalcEdgeMaxGradient(uhydro,gradient,n,m) ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
                real(kind=8) dimension(n,m),intent(in) :: uhydro
                real(kind=8) dimension(n),intent(out),depend(n) :: gradient
                integer, optional,intent(hide),depend(uhydro) :: n=shape(uhydro,0)
                integer, optional,intent(hide),depend(uhydro) :: m=shape(uhydro,1)
            end subroutine CalcEdgeMaxGradient
            subroutine CalcCellDiffusionFlux(uhydro,fluxes,n,m) ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
                real(kind=8) dimension(n,m),intent(in) :: uhydro
                real(kind=8) dimension(n,m),intent(out),depend(n,m) :: fluxes
                integer, optional,intent(hide),depend(uhydro) :: n=shape(uhydro,0)
                integer, optional,intent(hide),depend(uhydro) :: m=shape(uhydro,1)
            end subroutine CalcCellDiffusionFlux
            subroutine CalcCellStateSources(uhydro,sources,n,m) ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
                real(kind=8) dimension(n,m),intent(in) :: uhydro
                real(kind=8) dimension(n,m),intent(out),depend(n,m) :: sources
                integer, optional,intent(hide),depend(uhydro) :: n=shape(uhydro,0)
                integer, optional,intent(hide),depend(uhydro) :: m=shape(uhydro,1)
            end subroutine CalcCellStateSources
            subroutine TAIHydroEquations(uhydro,duhydro,n,m) ! in :TAIHydroMOD:tai_hydro_mod.f90:TAIHydroMOD
                real(kind=8) dimension(n,m),intent(in) :: uhydro
                real(kind=8) dimension(n,m),intent(out),depend(n,m) :: duhydro
                integer, optional,intent(hide),depend(uhydro) :: n=shape(uhydro,0)
                integer, optional,intent(hide),depend(uhydro) :: m=shape(uhydro,1)
            end subroutine TAIHydroEquations
        end module TAIHydroMOD
    end interface 
end python module TAIHydroMOD

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
